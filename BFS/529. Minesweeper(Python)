"""BFS
O(MN) O(MN)(Deque)"""
class Solution:
    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:
        eight_dir = [(1,0), (1, -1), (0, -1), (-1, -1),
             (-1, 0), (-1, 1), (0, 1), (1, 1)]
        def BFS(x, y):
            q = collections.deque()
            q.append((x, y))
            
            while q:
                cur_x, cur_y = q.popleft()
                num_mine = 0
                #find whether around has mine
                for i, j in eight_dir:
                    if 0 <= cur_x+i < len(board) and 0<= cur_y+j < len(board[0]) and board[cur_x+i][cur_y+j] == "M":
                        num_mine += 1
                #if no mine around, keep BFS
                if num_mine == 0:
                    #avoid revisit
                    board[cur_x][cur_y] = "B"
                    for i, j in eight_dir:
                        #"M" has been removed in the above code
                        #all visited will be change to "B" and we will not visit it again
                        #if it is digit, we will not keep BFS also(stop at digit)
                        #so the only possible situation to keep running BFS is "E"
                        if 0 <= cur_x+i < len(board) and 0<= cur_y+j < len(board[0]) and board[cur_x+i][cur_y+j] == "E":
                            #we need to update to "B" here again, so that in next loop, we will not revisit the node which is both the current node and next node's neighbor
                            """
                            1 2 3
                            4 5 6
                            This time is 4, next is 2, if not change we will keep visiting 5 and 1, which has already been visited
                            """
                            board[cur_x+i][cur_y+j] = "B"
                            q.append((cur_x+i, cur_y+j))
                #if at least one mine around, update current value and stop
                else:
                    #value in each square is string 
                    board[cur_x][cur_y] = str(num_mine)
            return board
        
        if board[click[0]][click[1]] == "M":
            board[click[0]][click[1]] = "X"
            return board
        else:
            return BFS(click[0], click[1])
