class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        #Get the len
        n = len(board)
        
        #Get the x,y coordinate based on the value of square
        def id2xy (id):
            x, y = (id-1)//n, (id-1)%n
            #if the number of line is odd, we need to reverse the order
            if x % 2 == 1:
                y = n - 1 - y
            #return n-1-x is because the first array in board represent the most top
            return n - 1 - x, y
        
        #BFS(not in four dir, but in 6 steps)
        #visited set of pointers
        visited = set()
        #[ (index, step) ], the number of step to go to that index(1 to 36 in example)
        q = deque([(1, 0)])
        
        while q:
            idx, step = q.popleft()
            
            #BFS, add all 6 diff choises
            for i in range(1, 6+1):
                #move i steos
                idx_nxt = idx + i
                #if out of border
                if idx_nxt > n*n:
                    break
                #get the coordinate based on index
                x_nxt, y_nxt = id2xy(idx_nxt)
                #if exist ladders or snakes
                if board[x_nxt][y_nxt] > 0:
                    idx_nxt = board[x_nxt][y_nxt]
                #find the result
                if idx_nxt == n*n:
                    return step+1
                #update the queue and visited set if that index is not been visited
                if idx_nxt not in visited:
                    visited.add(idx_nxt)
                    q.append((idx_nxt, step+1))
                
        return -1
        
        
