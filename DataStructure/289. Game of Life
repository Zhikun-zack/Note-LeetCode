"""Create a copy of original board and iterate
O(MN) O(MN)"""
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        neighbors = [(1,0), (1,-1), (0,-1), (-1,-1), 
                    (-1,0), (-1,1), (0,1), (1,1)]
        rows = len(board)
        cols = len(board[0])
        #make a copy so the former changed value will not affect latter value
        copy_board = [[board[r][c] for c in range(cols)] for r in range(rows)]
        
        for r in range(rows):
            for c in range(cols):
                #number of neighbor which is 1
                live_n = 0
                #eight directions search 
                for n in neighbors:
                    new_r = r + n[0]
                    new_c = c + n[1]
                    if(new_r>=0 and new_r < rows and new_c>=0 and new_c< cols and 
                       copy_board[new_r][new_c] == 1):
                        live_n += 1
                #Rule 1 and 3
                if copy_board[r][c] == 1 and (live_n < 2 or live_n > 3):
                    board[r][c] = 0
                #Rule 4
                if copy_board[r][c] == 0 and live_n == 3:
                    board[r][c] = 1
                
