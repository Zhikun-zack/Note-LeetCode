"""Not creating new board
if original is 0 change to 1, then change value to 2
if original is 1 change to 0, then change value to -1
O(MN) O(1)
"""
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        neighbors = [(1,0), (1,-1), (0,-1), (-1,-1), 
                    (-1,0), (-1,1), (0,1), (1,1)]
        rows = len(board)
        cols = len(board[0])
        
        for r in range(rows):
            for c in range(cols):
                live_n = 0
                for n in neighbors:
                    new_r = r + n[0]
                    new_c = c + n[1]
                    #!!!!abs(board[][]), if board[][] == 1 means change from 1 to 0,
                    #we need to compare the original valus which is 1
                    if(new_r>=0 and new_r < rows and new_c>=0 and new_c< cols and 
                       abs(board[new_r][new_c]) == 1):
                        live_n += 1
                if board[r][c] == 1 and (live_n < 2 or live_n > 3):
                    board[r][c] = -1
                if board[r][c] == 0 and live_n == 3:
                    board[r][c] = 2
        #update values, change 2 -1 to 1 and 0
        for r in range(rows):
            for c in range(cols):
                if board[r][c] > 0:
                    board[r][c] = 1
                else:
                    board[r][c] = 0
