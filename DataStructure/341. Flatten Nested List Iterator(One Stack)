# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def isInteger(self) -> bool:
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        """
#
#    def getInteger(self) -> int:
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        """
#
#    def getList(self) -> [NestedInteger]:
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        """
"""Stack
O(N) N is total number of integers
O(N) 
Problem: Reversing the lists to put them onto the stack can be an expensive operation, 
and it turns out it isn't necessary."""
class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        #stack is first in last out, we need to make sure first element first out, so it must last in
        self.flattenStack = list(reversed(nestedList))
    
    def next(self) -> int:
        #flatten the list's first element
        self.make_stack_top_integer()
        return self.flattenStack.pop().getInteger()
    
    def hasNext(self) -> bool:
        self.make_stack_top_integer()
        return len(self.flattenStack) > 0
    def make_stack_top_integer(self):
        #if flattenStack is not empty and first element is not integer
        while self.flattenStack and not self.flattenStack[-1].isInteger():
            self.flattenStack.extend(reversed(self.flattenStack.pop().getList()))

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())
