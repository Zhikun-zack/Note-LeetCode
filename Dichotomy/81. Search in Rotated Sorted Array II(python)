'''
Using dichotomy to find a value, if value exist, return true else return false
We can just use a for loop traverse all value but it is to simple

So we just need to consider three situations:
1. nums[start] == nums[mid]:
    we are not sure which part is moved part
    just jump it, start++
2. nums[start] > nums[mid]
    6 7 1 2 3 4
    if target is larger than nums[mid] and less or equal to nums[len-1] 
    find target in the right part
    else 
    find target in the left part
3. nums[start] < nums[mid]:
    6 7 8 9 1 2
    if target larger equal to nums[start] and less nums[mid] 
    find in left part
    else
    find in right part
'''
class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        n = len(nums)
        if nums == None or n == 0:
            return False
        l, r = 0, n-1
        while l <= r:
            mid = l + (r-l)//2
            #find the result
            if (nums[mid] == target): return True
            
            #Three situations
            if (nums[l] == nums[mid]): 
                l += 1
                continue
            elif nums[mid] > nums[l]:
                if nums[mid] > target and nums[l] <= target:
                    r = mid-1
                else:
                    l = mid+1
            else:
                if nums[mid] < target and nums[r] >= target:
                    l = mid + 1
                else:
                    r = mid - 1
        return False
