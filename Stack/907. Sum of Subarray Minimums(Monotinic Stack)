"""O(N) Monotomic Stack
Iterate all elements in arr
find the most left range and right range and in that range 
    that element is the min value
res += that element's value * number of combination

X X X 0 4 2 3 8 1 X X X 
       [  ^    ]
res += 2 * (2*3) (2 places for left, 3 for right)

whole problem is: find the prev smaller element
                  find the next smaller element
"""
class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        stack = [-1]
        result = 0
        for idx, x in enumerate(arr + [0]):
            while len(stack) > 1 and x < arr[stack[-1]]:
                index = stack.pop()
                left_length = index - stack[-1]
                right_length = idx - index
                result += left_length * right_length * arr[index]
            stack.append(idx)
        return result % (10 ** 9 + 7)
