#Back tracking
"""
O(n^3)
O(n) depth of recursion tree
"""
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:     
        #for improving the speed of back tracking
        import functools
        @functools.lru_cache(None)
        def back_track(s):
            if(not s):
                return True
            res = False
            #sub string range from 0 to i-1, so in order to visit all elements, we have to make i larger than len(s)
            for i in range(1, len(s)+1):
                #we may call this part several times
                #eg: carstt ['car', 'cars'], both car and cars are in string
                if s[:i] in wordDict:
                    #we have to make sure that res will be true when any situation has been meet
                    res = res or back_track(s[i:])
            return res
        return back_track(s)

